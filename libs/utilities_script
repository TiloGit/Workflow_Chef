#!/bin/bash
# set -e

readonly LOCAL_CHEF_CLIENT_LOG="/var/log/baw_shell_chef_client.log"

# echo Get the vaule by key from properties file $BAW_CHEF_PROPERTIES_FILE
getValueFromPropFile () {

  if [ ! -f $1 ]; then
      echo "File $1 not found!"
      return 1
  fi

  local src_file=$1
  # local key=$2 # this way have issues with empty value property
  # local value=$( cat $src_file | grep -w ^${key} | cut -d= -f2 )
  # local key=$2"=" to solve the key without any value situations, like "key= " defined in the properties file only
  # cut -d= -f2-  cut with delimiter '=', and only the first '=' counts. for example if input is 'abcd==efg=h==', the output is '=efg=h=='
  local key=$2"="
  local value=$( cat $src_file | grep ^${key} | cut -d= -f2- )
  echo $value
}

Validation_Prop() {

  if (($# != 2)); then
    echo "Usage: the first parameter is vaule, the second parameter is key in properties file"
    return 1
  fi

  if [ -z "$1" ]; then echo "Validation Failed: $2 can not be empty in properties file"; return 1; fi
}

Purification_Logs () {

  sed 's/[\x01-\x1F\x7F]\[[0-9]\+\(;[0-9]\+\)*m\|[\x01-\x1F\x7F]//g' -u
}

Decode_base64 () {
  # $1 key, description
  # $2 value, is an encrypted base64 string 
  local key=$1
  local value=$2

  echo "$value" | base64 -d &> /dev/null

  if (($? != 0)); then
    printf "\nError, could not decode base64 string, the encrypted base64 string is $value and its key is $key , please check your encryption\n\n" >&2
    return 1
  fi

  local decrypted_pass=$(echo "$value" | base64 -d)

  echo $decrypted_pass | iconv --from-code=UTF-8 &> /dev/null

  if (($? != 0)); then
    printf "\nError, invalid byte sequence in UTF-8 (ArgumentError), the encrypted base64 string is $value and its key is $key , please check your encryption\n\n" >&2
    return 1
  fi
  # if [[ $decrypted_pass = *[![:ascii:]]* ]]; then
  #   printf "\nWARNING, the value we decoded contains non-ASCII characters, the encrypted base64 string is $value and its key is $key\n\n" >&2
  # fi

  echo $decrypted_pass
}


Load_Host_Name_Singlenode () {

  # Get basic info
  var_Workflow01_FQDN=$(getValueFromPropFile $BAW_CHEF_PROPERTIES_FILE workflow_host01_fqdn_name)

  Validation_Prop "$var_Workflow01_FQDN"  "workflow_host01_fqdn_name" || return 1 

  var_Workflow01_name=$(echo $var_Workflow01_FQDN | cut -d '.' -f1)
}


Load_Host_Name_Multinodes () {

  # Get basic info
  Load_Host_Name_Singlenode || return 1 

  # "node_hostname": "kvm-018075.test.local",
  var_Workflow02_FQDN=$(getValueFromPropFile $BAW_CHEF_PROPERTIES_FILE workflow_host02_fqdn_name)

  Validation_Prop "$var_Workflow02_FQDN"  "workflow_host02_fqdn_name" || return 1 

  if [ ! -z $(echo $var_Workflow01_FQDN | grep '\.' ) ]
  then
    var_Workflow01_domain=$(echo $var_Workflow01_FQDN | cut -d '.' -f2-)
  fi

  var_Workflow02_name=$(echo $var_Workflow02_FQDN | cut -d '.' -f1)
  if [ ! -z $(echo $var_Workflow02_FQDN | grep '\.' ) ]
  then
    var_Workflow02_domain=$(echo $var_Workflow02_FQDN | cut -d '.' -f2-)
  fi

  if [ ! -z "$var_Workflow01_name" -a ! -z "$var_Workflow01_domain" ]
  then
    if [ ! -z "$var_Workflow02_name" -a ! -z "$var_Workflow02_domain" ]
    then
      local_node_hostnames="$var_Workflow01_name.$var_Workflow01_domain,$var_Workflow02_name.$var_Workflow02_domain"
    else
      local_node_hostnames="$var_Workflow01_name.$var_Workflow01_domain"
    fi
  else
    local_node_hostnames="$var_Workflow02_name.$var_Workflow02_domain"
  fi 
}

Common_Create_Chef_Vaults () {

  # Generate_CHEFVAULT 
  WORKFLOW_SECRETS_TMPL_FILE=$workflow_secrets_TMPL_FILE
  Auto_Create_WORKFLOW_SECRETS || return 1
  # RUNTIME_WORKFLOW_SECRETS_JSON
  
  if [ $( eval "knife vault list -M client | grep ^$BAW_CHEF_VAULT_NAME$" ) ]; then
    knife vault delete $BAW_CHEF_VAULT_NAME $BAW_CHEF_VAULT_ITEM -M client -y 
  fi 
}

Create_Chef_Vaults_Singlenode () {

  Common_Create_Chef_Vaults || return 1
  knife vault create $BAW_CHEF_VAULT_NAME $BAW_CHEF_VAULT_ITEM "$RUNTIME_WORKFLOW_SECRETS_JSON" -M client || { echo "Error when creating chef vault"; return 1; } 
}

Create_Chef_Vaults_Multinodes () {

  Common_Create_Chef_Vaults || return 1
  knife vault create $BAW_CHEF_VAULT_NAME $BAW_CHEF_VAULT_ITEM "$RUNTIME_WORKFLOW_SECRETS_JSON" -C "$WF01_ON_CHEF_SERVER,$WF02_ON_CHEF_SERVER" -M client || { echo "Error when creating chef vault"; return 1; }
}

Common_Print_TopologyLogs () {

  echo
  echo "The logs on Chef Workstation are under $LOG_DIR directory"
  echo
  echo "  The monitor"
  echo "  Log to $BAW_CHEF_LOG"
  echo
  echo "  Topology"
  echo
}
Print_TopologyLogs_Singlenode () {

  Common_Print_TopologyLogs || return 1
  echo "  Single Host: IBM Business Automation Workflow Enterprise - Deployment Manager and Custom Node, one cluster member."
  echo "  Log to $SNODE_LOG"
  echo
  echo "The log on Chef Client is $LOCAL_CHEF_CLIENT_LOG"
  echo
}

Print_TopologyLogs_Multinodes () {

  Common_Print_TopologyLogs || return 1
  echo "  Host 1, Workflow01 or WF01: IBM Business Automation Workflow Deployment Manager (Dmgr), Custom Node, one cluster member,"
  echo "  Log to $WF01_LOG"
  echo
  echo "  Host 2, Workflow02 or WF02: IBM Business Automation Workflow Custom Node, one cluster member,"
  echo "  Log to $WF02_LOG"
  echo
  echo "The log on Chef Client is $LOCAL_CHEF_CLIENT_LOG"
  echo
}

######## Monitor ########
Monitor () {

# $1: switch for enabling baw dependency logic, 0 for disable, others for enable 
# $2: tasks, an array including all task pids. tasks=( task1, task2, task3, ... ). 
# $3: the name of the task1, string
# $4: the name of the task2, string
# $5: the name of the task3, string

# Set the exit status $? to the exit code of the last program to exit non-zero or zero if exited successfully
  set -o pipefail

  local enable_baw_boolean=$1
  local tasks=( $2 )
  local task_tags=( $2 )
  local task1_name=$3
  local task2_name=$4
  local task3_name=$5

  local sleep_time=10
  local TOTAL_TASK_NU=${#tasks[*]}
  readonly TOTAL_TASK_NU

  # Define some tags to mark the exit status for each task
  local default_status=9999
  local task1_exit_status=$default_status
  local task2_exit_status=$default_status
  local task3_exit_status=$default_status

  # Define boolean tags to ensure each execute only once
  local trigger1=0
  local trigger2=0
  local trigger3=0

  local tasks_do_next_remaining=()

  while (( ${#task_tags[*]} )); do
     # echo Remaining tasks: "${task_tags[*]}"
      for tb in ${tasks[@]}; do
        if [ -n "$(ps -p $tb -o pid=)" ]; then
          case "$tb" in
            "${tasks[0]}")  
              if [ ! -z "$task1_name" -a "$task1_name" != " " ]; then
                echo $(date -Iseconds), TASK: $task1_name PID: $tb is in process
              fi
            ;;
            "${tasks[1]}") 
              if [ ! -z "$task2_name" -a "$task2_name" != " " ]; then
                echo $(date -Iseconds), TASK: $task2_name PID: $tb is in process
              fi
            ;;
            "${tasks[2]}") 
              if [ ! -z "$task3_name" -a "$task3_name" != " " ]; then
                echo $(date -Iseconds), TASK: $task3_name PID: $tb is in process
              fi
            ;;
          esac
        else
            case "$tb" in
              "${tasks[0]}")
                 if [ -n "$(echo ${task_tags[*]} | grep $tb)" ]; then
                   # echo
                   # echo TASK: $task1_name PID: $tb exited, checking its exit status
                   unset "task_tags[0]"
                   wait $tb
                   task1_exit_status=$?
                   if [ $task1_exit_status -eq 0 ]; then
                     if [ ! -z "$task1_name" -a "$task1_name" != " " ]; then                   
                      echo
                      echo $(date -Iseconds), SUCCESS: $task1_name PID: $tb was done successfully
                      echo
                     fi
                   else
                     echo
                     echo $(date -Iseconds), ERROR: $task1_name PID: $tb error, with status $task1_exit_status.
                     echo
                   fi
                 fi
              ;;
              "${tasks[1]}")
                  if [ -n "$(echo ${task_tags[*]} | grep $tb)" ]; then
                    # echo
                    # echo TASK: $task2_name PID: $tb exited, checking its exit status
                    unset "task_tags[1]"
                    wait $tb
                    task2_exit_status=$?
                    if [ $task2_exit_status -eq 0 ]; then
                      if [ ! -z "$task2_name" -a "$task2_name" != " " ]; then                    
                        echo
                        echo "$(date -Iseconds), SUCCESS: $task2_name PID: $tb was done successfully"
                        echo
                      fi
                    else
                      echo
                      echo $(date -Iseconds), ERROR: $task2_name PID: $tb error occurred, with status $task2_exit_status.
                      echo
                    fi
                  fi
              ;;
              "${tasks[2]}")
                  if [ -n "$(echo ${task_tags[*]} | grep $tb)" ]; then
                    # echo TASK: $task3_name PID: $tb exited, checking its exit status
                    unset "task_tags[2]"
                    wait $tb
                    task3_exit_status=$?
                   if [ $task3_exit_status -eq 0 ]; then
                     if [ ! -z "$task3_name" -a "$task3_name" != " " ]; then                   
                      echo
                      echo "$(date -Iseconds), SUCCESS: $task3_name PID: $tb was done successfully"
                      echo
                     fi
                   else
                     echo
                     echo $(date -Iseconds), ERROR: $task3_name PID: $tb error, with status $task3_exit_status.
                     echo
                   fi
                 fi
              ;;
          esac
        fi
      done
      # When enable_baw_boolean is not 0, check the dependency for BAW
      # if [ $enable_baw_boolean -ne 0  -a $total_task_nu -ge 2 ]; then
      if [ $enable_baw_boolean -ne 0 ]; then
        # echo BAW dependency logic is enabled
        Monitor_Do_Next_Tasks
      fi
      sleep $sleep_time
  done

    # Return 1 when any one of them failed
    case $TOTAL_TASK_NU in
    1)
      if [ $task1_exit_status -eq 0 ]; then
        return 0
        else
        return 1
      fi
    ;;
    2)
      if [ $task1_exit_status -eq 0 -a $task2_exit_status -eq 0 ]; then
        return 0
        else
        return 1
      fi
    ;;
    3)
      if [ $task1_exit_status -eq 0 -a $task2_exit_status -eq 0 -a $task3_exit_status -eq 0 ]; then
        return 0
        else
        return 1
      fi
    ;;
  esac
}

# When enable_baw_boolean is not 0, check the dependency for BAW
Monitor_Do_Next_Tasks () {
  # tasks_do_next_remaining=() # this var was moved to upper function
  case $TOTAL_TASK_NU in
    2)
      # parallel
      # WF01 step 2 depends on WF01 step 1 ("role[$WF01_ROLE_CONFIG_NAME]") complete
      if [ $trigger1 -eq 0 -a $task1_exit_status -eq 0 ]; then
        echo
        # echo "$(date -Iseconds), MTASK: $LOG_WF01_NAME Step 2 of 2 starts, TASKS LIST: (Post Action)"
        echo
        WF01_step2 &
        local TASK_WF01_step2=$!
        readonly TASK_WF01_step2&
        tasks_do_next_remaining+=("$TASK_WF01_step2")
        trigger1=1
      fi

      # WF02 step 2 depends on WF02 step 1 "role[$WF02_ROLE_APPLYIFIX]" and WF01 step 1 ("role[$WF01_ROLE_CONFIG_NAME]") complete
      if [ $trigger2 -eq 0 -a $task2_exit_status -eq 0 -a $task1_exit_status -eq 0 ]; then
        echo
        # echo "$(date -Iseconds), MTASK: $LOG_WF02_NAME Step 2 of 2 starts, TASKS List (Configuration, Post Action)"
        echo
        WF02_step2 &
        local TASK_WF02_step2=$!
        readonly TASK_WF02_step2&
        tasks_do_next_remaining+=("$TASK_WF02_step2")
        trigger2=1
      fi

      # Checking the all the remaining tasks complete before exit
      if [ $trigger3 -eq 0 -a $task1_exit_status -ne $default_status -a $task2_exit_status -ne $default_status ]; then
        #echo MTASK: # Checking the all the remaining tasks complete before exit
        # Monitor 0 "${tasks_do_next_remaining[*]}" "$LOG_WF01_NAME Step 2 of 2" "$LOG_WF02_NAME Step 2 of 2" || return 1
        Monitor 0 "${tasks_do_next_remaining[*]}" || return 1
        trigger3=1
      fi
    ;;
    3)
      # WF01 step 2 depends on IHS ("role[$IHS_ROLE_CONFIG]") complete
      if [ $trigger1 -eq 0 -a $task1_exit_status -eq 0 -a $task3_exit_status -eq 0 ]; then
        echo
        # echo "$(date -Iseconds), MTASK: $LOG_WF01_NAME Step 2 of 2 starts, TASKS LIST: (Configure Web Server, Post Action)"
        echo
        WF01_step2 &
        local TASK_WF01_step2=$!
        readonly TASK_WF01_step2&
        tasks_do_next_remaining+=("$TASK_WF01_step2")
        trigger1=1
      fi

      # WF02 step 2 depends on WF01 step 1 ("role[$WF01_ROLE_CONFIG_NAME]") complete
      if [ $trigger2 -eq 0 -a $task2_exit_status -eq 0 -a $task1_exit_status -eq 0 ]; then
        echo
        # echo "$(date -Iseconds), MTASK: $LOG_WF02_NAME Step 2 of 2 starts, TASKS List (Configuration, Post Action)"
        echo
        WF02_step2 &
        local TASK_WF02_step2=$!
        readonly TASK_WF02_step2&
        tasks_do_next_remaining+=("$TASK_WF02_step2")
        trigger2=1
      fi

      # Checking the all the remaining tasks complete before exit
      if [ $trigger3 -eq 0 -a $task1_exit_status -ne $default_status -a $task2_exit_status -ne $default_status -a $task3_exit_status -ne $default_status ]; then
        # echo "MTASK: Checking the last tasks before exit"
        # Monitor 0 "${tasks_do_next_remaining[*]}" "$LOG_WF01_NAME Step 2 of 2" "$LOG_WF02_NAME Step 2 of 2" || return 1
        Monitor 0 "${tasks_do_next_remaining[*]}" || return 1
        trigger3=1
      fi
    ;;
  esac
}


# Generate dir
Create_Dir () {

  local i=0 # The times which attempt to create dir 
  local created_dir=

  local REQUESTED_DIR=$1

  while ((++i <= 10)); do
  created_dir=${REQUESTED_DIR:="/tmp/baw_chef/"}
  mkdir -m 755 -p "$created_dir" 2>/dev/null && break
  done

  if ((i > 10)); then
  printf 'Could not create directory, $created_dir\n' >&2
  exit 1
  fi

  echo $created_dir
}